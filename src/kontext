      
import hmac
import time
import requests
from datetime import datetime
import hashlib
import uuid
import base64


class SmartImg1:
    def __init__(self, ak='', sk='', interval=5):
        """
        :param ak
        :param sk
        :param interval 轮询间隔
        """
        self.ak = ak
        self.sk = sk
        self.time_stamp = int(datetime.now().timestamp() * 1000)  # 毫秒级时间戳
        self.signature_nonce = uuid.uuid1()  # 随机字符串
        self.signature_kontext_text2img = self._hash_kontext_text2img_sk(self.sk, self.time_stamp, self.signature_nonce)
        self.signature_kontext_img2img = self._hash_kontext_img2img_sk(self.sk, self.time_stamp, self.signature_nonce)
        self.signature_task_status = self._hash_task_status_sk(self.sk, self.time_stamp, self.signature_nonce)
        self.interval = interval
        self.headers = {'Content-Type': 'application/json'}
        self.kontext_text2img = self.kontext_text2img(self.ak, self.signature_kontext_text2img, self.time_stamp,
                                                  self.signature_nonce)
        self.kontext_img2img = self.kontext_img2img(self.ak, self.signature_kontext_img2img, self.time_stamp,
                                                  self.signature_nonce)
        self.get_task_status = self.get_task_status_url(self.ak, self.signature_task_status, self.time_stamp,
                                                               self.signature_nonce)
    def hmac_sha1(self, key, code):
        hmac_code = hmac.new(key.encode(), code.encode(), hashlib.sha1)
        return hmac_code.digest()

    def _hash_kontext_text2img_sk(self, key, s_time, ro):
        """加密sk"""
        data = "/api/generate/kontext/text2img" + "&" + str(s_time) + "&" + str(ro)
        s = base64.urlsafe_b64encode(self.hmac_sha1(key, data)).rstrip(b'=').decode()
        return s
    
    def _hash_kontext_img2img_sk(self, key, s_time, ro):
        """加密sk"""
        data = "/api/generate/kontext/img2img" + "&" + str(s_time) + "&" + str(ro)
        s = base64.urlsafe_b64encode(self.hmac_sha1(key, data)).rstrip(b'=').decode()
        return s

    def _hash_task_status_sk(self, key, s_time, ro):
        """加密sk"""
        data = "/api/generate/status" + "&" + str(s_time) + "&" + str(ro)
        s = base64.urlsafe_b64encode(self.hmac_sha1(key, data)).rstrip(b'=').decode()
        return s

    def kontext_text2img(self, ak, signature, time_stamp, signature_nonce):
        url = f"https://openapi.liblibai.cloud/api/generate/kontext/text2img?AccessKey={ak}&Signature={signature}&Timestamp={time_stamp}&SignatureNonce={signature_nonce}"
        return url
    
    def kontext_img2img(self, ak, signature, time_stamp, signature_nonce):
        url = f"https://openapi.liblibai.cloud/api/generate/kontext/img2img?AccessKey={ak}&Signature={signature}&Timestamp={time_stamp}&SignatureNonce={signature_nonce}"
        return url    

    def get_task_status_url(self, ak, signature, time_stamp, signature_nonce):

        url = f"https://openapi.liblibai.cloud/api/generate/status?AccessKey={ak}&Signature={signature}&Timestamp={time_stamp}&SignatureNonce={signature_nonce}"
        return url


    def kontext_text2img_generate(self):        
        base_json = {
            "templateUuid":"fe9928fde1b4491c9b360dd24aa2b115",
            "generateParams":{
                "model":"pro",
                "prompt":"为现实主义电影摄影作品创作一张封面海报，具有艺术感染力，标题为“Liblib”。文字应用白笔书写。整体形象应具有电影海报的风格。不要使用黑白图像。",
                "aspectRatio":"3:4",
                "guidance_scale":3.5,
                "imgCount":1      
            }
        }
        self.run(base_json, self.kontext_text2img)

    def kontext_img2img_edit(self):        
        base_json = {
            "templateUuid":"1c0a9712b3d84e1b8a9f49514a46d88c",
            "generateParams":{
                "prompt":"Turn this image into a Ghibli-style, a traditional Japanese anime aesthetics.",
                "aspectRatio":"2:3",
                "guidance_scale":3.5,
                "imgCount":1,
                "image_list":[
                    "https://liblibai-online.liblib.cloud/img/081e9f07d9bd4c2ba090efde163518f9/10d686ff178fb603bec49e84eed8a5d95c20d969cf3ea4abb83d11caff80fd34.jpg"]      
            }
        }
        self.run(base_json, self.kontext_img2img)

    def kontext_img2img_multiImage(self):        
        base_json = {
            "templateUuid":"1c0a9712b3d84e1b8a9f49514a46d88c",
            "generateParams":{
                "prompt":"让女孩坐在第二张图的椅子上看书",
                "aspectRatio":"3:4",
                "guidance_scale":3.5,
                "imgCount":1,
                "image_list":[
                    "https://liblibai-online.liblib.cloud/img/081e9f07d9bd4c2ba090efde163518f9/10d686ff178fb603bec49e84eed8a5d95c20d969cf3ea4abb83d11caff80fd34.jpg",
                    "https://liblibai-online.liblib.cloud/img/081e9f07d9bd4c2ba090efde163518f9/92cc6b39931ed0932dfe49a7b354ce1a8f6ede819ccbf8a9f3a2fc315b0be42a.png"
                    ]
                }        
            }
        self.run(base_json, self.kontext_img2img)

    def run(self, data, url, timeout=300):
        """
        发送任务到生图接口，直到返回image为止，失败抛出异常信息
        """
        start_time = time.time()  # 记录开始时间
        # 这里提交任务，校验是否提交成功，并且获取任务ID
        print(url)
        response = requests.post(url=url, headers=self.headers, json=data)
        response.raise_for_status()
        progress = response.json()
        print(progress)
        if progress['code'] == 0:
            # 如果获取到任务ID，执行等待生图
            while True:
                current_time = time.time()
                if (current_time - start_time) > timeout:
                    print(f"{timeout}s任务超时，已退出轮询。")
                    return None

                generate_uuid = progress["data"]['generateUuid']
                data = {"generateUuid": generate_uuid}
                response = requests.post(url=self.get_task_status, headers=self.headers, json=data)
                response.raise_for_status()
                progress = response.json()
                print(progress)

                if progress['data'].get('images') and any(
                        image for image in progress['data']['images'] if image is not None):
                    print("任务完成，获取到图像数据。")
                    return progress

                print(f"任务尚未完成，等待 {self.interval} 秒...")
                time.sleep(self.interval)
        else:
            return f'任务失败,原因：code {progress["msg"]}'


def main():
    test = SmartImg1()
    start_time = time.time()
    # test.kontext_text2img_generate()
    test.kontext_img2img_edit()
    # test.kontext_img2img_multiImage()
    end_time = time.time()
    time_diff = end_time - start_time
    print('任务耗时：', time_diff)


if __name__ == '__main__':
    main()

    